import type { ClientOptions } from '@algolia/client-common';
import type { GenerateSecuredApiKeyOptions, GetSecuredApiKeyRemainingValidityOptions } from '../model';
export { apiClientVersion } from '../src/searchClient';
export * from '../model';
/**
 * The client type.
 */
export type SearchClient = ReturnType<typeof searchClient>;
export declare function searchClient(appId: string, apiKey: string, options?: ClientOptions): {
    /**
     * Helper: Generates a secured API key based on the given `parentApiKey` and given `restrictions`.
     *
     * @summary Helper: Generates a secured API key based on the given `parentApiKey` and given `restrictions`.
     * @param generateSecuredApiKey - The `generateSecuredApiKey` object.
     * @param generateSecuredApiKey.parentApiKey - The base API key from which to generate the new secured one.
     * @param generateSecuredApiKey.restrictions - A set of properties defining the restrictions of the secured API key.
     */
    generateSecuredApiKey({ parentApiKey, restrictions, }: GenerateSecuredApiKeyOptions): string;
    /**
     * Helper: Retrieves the remaining validity of the previous generated `securedApiKey`, the `ValidUntil` parameter must have been provided.
     *
     * @summary Helper: Retrieves the remaining validity of the previous generated `secured_api_key`, the `ValidUntil` parameter must have been provided.
     * @param getSecuredApiKeyRemainingValidity - The `getSecuredApiKeyRemainingValidity` object.
     * @param getSecuredApiKeyRemainingValidity.securedApiKey - The secured API key generated with the `generateSecuredApiKey` method.
     */
    getSecuredApiKeyRemainingValidity({ securedApiKey, }: GetSecuredApiKeyRemainingValidityOptions): number;
    transporter: import("@algolia/client-common").Transporter;
    appId: string;
    clearCache(): Promise<void>;
    _ua: string;
    addAlgoliaAgent(segment: string, version?: string): void;
    waitForTask({ indexName, taskID, maxRetries, timeout, }: import("../model").WaitForTaskOptions, requestOptions?: import("@algolia/client-common").RequestOptions): Promise<import("../model").GetTaskResponse>;
    waitForAppTask({ taskID, maxRetries, timeout, }: import("../model").WaitForAppTaskOptions, requestOptions?: import("@algolia/client-common").RequestOptions): Promise<import("../model").GetTaskResponse>;
    waitForApiKey({ operation, key, apiKey, maxRetries, timeout, }: import("../model").WaitForApiKeyOptions, requestOptions?: import("@algolia/client-common").RequestOptions): Promise<import("../model").GetApiKeyResponse | undefined>;
    browseObjects<T>({ indexName, browseParams, ...browseObjectsOptions }: import("../model").BrowseOptions<import("../model").BrowseResponse<T>> & import("../model").BrowseProps, requestOptions?: import("@algolia/client-common").RequestOptions): Promise<import("../model").BrowseResponse<T>>;
    browseRules({ indexName, searchRulesParams, ...browseRulesOptions }: import("../model").BrowseOptions<import("../model").SearchRulesResponse> & import("../model").SearchRulesProps, requestOptions?: import("@algolia/client-common").RequestOptions): Promise<import("../model").SearchRulesResponse>;
    browseSynonyms({ indexName, searchSynonymsParams, ...browseSynonymsOptions }: import("../model").BrowseOptions<import("../model").SearchSynonymsResponse> & import("../model").SearchSynonymsProps, requestOptions?: import("@algolia/client-common").RequestOptions): Promise<import("../model").SearchSynonymsResponse>;
    chunkedBatch({ indexName, objects, action, waitForTasks, batchSize, }: import("../model").ChunkedBatchOptions, requestOptions?: import("@algolia/client-common").RequestOptions): Promise<import("../model").BatchResponse[]>;
    saveObjects({ indexName, objects }: import("../model").SaveObjectsOptions, requestOptions?: import("@algolia/client-common").RequestOptions): Promise<import("../model").BatchResponse[]>;
    deleteObjects({ indexName, objectIDs }: import("../model").DeleteObjectsOptions, requestOptions?: import("@algolia/client-common").RequestOptions): Promise<import("../model").BatchResponse[]>;
    partialUpdateObjects({ indexName, objects, createIfNotExists }: import("../model").PartialUpdateObjectsOptions, requestOptions?: import("@algolia/client-common").RequestOptions): Promise<import("../model").BatchResponse[]>;
    replaceAllObjects({ indexName, objects, batchSize }: import("../model").ReplaceAllObjectsOptions, requestOptions?: import("@algolia/client-common").RequestOptions): Promise<import("../model").ReplaceAllObjectsResponse>;
    searchForHits<T>(searchMethodParams: import("../model").LegacySearchMethodProps | import("../model").SearchMethodParams, requestOptions?: import("@algolia/client-common").RequestOptions): Promise<{
        results: Array<import("../model").SearchResponse<T>>;
    }>;
    searchForFacets(searchMethodParams: import("../model").LegacySearchMethodProps | import("../model").SearchMethodParams, requestOptions?: import("@algolia/client-common").RequestOptions): Promise<{
        results: import("../model").SearchForFacetValuesResponse[];
    }>;
    addApiKey(apiKey: import("../model").ApiKey, requestOptions?: import("@algolia/client-common").RequestOptions): Promise<import("../model").AddApiKeyResponse>;
    addOrUpdateObject({ indexName, objectID, body }: import("../model").AddOrUpdateObjectProps, requestOptions?: import("@algolia/client-common").RequestOptions): Promise<import("../model").UpdatedAtWithObjectIdResponse>;
    appendSource(source: import("../model").Source, requestOptions?: import("@algolia/client-common").RequestOptions): Promise<import("../model").CreatedAtResponse>;
    assignUserId({ xAlgoliaUserID, assignUserIdParams }: import("../model").AssignUserIdProps, requestOptions?: import("@algolia/client-common").RequestOptions): Promise<import("../model").CreatedAtResponse>;
    batch({ indexName, batchWriteParams }: import("../model").BatchProps, requestOptions?: import("@algolia/client-common").RequestOptions): Promise<import("../model").BatchResponse>;
    batchAssignUserIds({ xAlgoliaUserID, batchAssignUserIdsParams }: import("../model").BatchAssignUserIdsProps, requestOptions?: import("@algolia/client-common").RequestOptions): Promise<import("../model").CreatedAtResponse>;
    batchDictionaryEntries({ dictionaryName, batchDictionaryEntriesParams, }: import("../model").BatchDictionaryEntriesProps, requestOptions?: import("@algolia/client-common").RequestOptions): Promise<import("../model").UpdatedAtResponse>;
    browse<T>({ indexName, browseParams }: import("../model").BrowseProps, requestOptions?: import("@algolia/client-common").RequestOptions): Promise<import("../model").BrowseResponse<T>>;
    clearObjects({ indexName }: import("../model").ClearObjectsProps, requestOptions?: import("@algolia/client-common").RequestOptions): Promise<import("../model").UpdatedAtResponse>;
    clearRules({ indexName, forwardToReplicas }: import("../model").ClearRulesProps, requestOptions?: import("@algolia/client-common").RequestOptions): Promise<import("../model").UpdatedAtResponse>;
    clearSynonyms({ indexName, forwardToReplicas }: import("../model").ClearSynonymsProps, requestOptions?: import("@algolia/client-common").RequestOptions): Promise<import("../model").UpdatedAtResponse>;
    customDelete({ path, parameters }: import("../model").CustomDeleteProps, requestOptions?: import("@algolia/client-common").RequestOptions): Promise<Record<string, any>>;
    customGet({ path, parameters }: import("../model").CustomGetProps, requestOptions?: import("@algolia/client-common").RequestOptions): Promise<Record<string, any>>;
    customPost({ path, parameters, body }: import("../model").CustomPostProps, requestOptions?: import("@algolia/client-common").RequestOptions): Promise<Record<string, any>>;
    customPut({ path, parameters, body }: import("../model").CustomPutProps, requestOptions?: import("@algolia/client-common").RequestOptions): Promise<Record<string, any>>;
    deleteApiKey({ key }: import("../model").DeleteApiKeyProps, requestOptions?: import("@algolia/client-common").RequestOptions): Promise<import("../model").DeleteApiKeyResponse>;
    deleteBy({ indexName, deleteByParams }: import("../model").DeleteByProps, requestOptions?: import("@algolia/client-common").RequestOptions): Promise<import("../model").DeletedAtResponse>;
    deleteIndex({ indexName }: import("../model").DeleteIndexProps, requestOptions?: import("@algolia/client-common").RequestOptions): Promise<import("../model").DeletedAtResponse>;
    deleteObject({ indexName, objectID }: import("../model").DeleteObjectProps, requestOptions?: import("@algolia/client-common").RequestOptions): Promise<import("../model").DeletedAtResponse>;
    deleteRule({ indexName, objectID, forwardToReplicas }: import("../model").DeleteRuleProps, requestOptions?: import("@algolia/client-common").RequestOptions): Promise<import("../model").UpdatedAtResponse>;
    deleteSource({ source }: import("../model").DeleteSourceProps, requestOptions?: import("@algolia/client-common").RequestOptions): Promise<import("../model").DeleteSourceResponse>;
    deleteSynonym({ indexName, objectID, forwardToReplicas }: import("../model").DeleteSynonymProps, requestOptions?: import("@algolia/client-common").RequestOptions): Promise<import("../model").DeletedAtResponse>;
    getApiKey({ key }: import("../model").GetApiKeyProps, requestOptions?: import("@algolia/client-common").RequestOptions): Promise<import("../model").GetApiKeyResponse>;
    getAppTask({ taskID }: import("../model").GetAppTaskProps, requestOptions?: import("@algolia/client-common").RequestOptions): Promise<import("../model").GetTaskResponse>;
    getDictionaryLanguages(requestOptions?: import("@algolia/client-common").RequestOptions): Promise<Record<string, import("../model").Languages>>;
    getDictionarySettings(requestOptions?: import("@algolia/client-common").RequestOptions): Promise<import("../model").GetDictionarySettingsResponse>;
    getLogs({ offset, length, indexName, type }?: import("../model").GetLogsProps, requestOptions?: import("@algolia/client-common").RequestOptions | undefined): Promise<import("../model").GetLogsResponse>;
    getObject({ indexName, objectID, attributesToRetrieve }: import("../model").GetObjectProps, requestOptions?: import("@algolia/client-common").RequestOptions): Promise<Record<string, any>>;
    getObjects<T>(getObjectsParams: import("../model").GetObjectsParams, requestOptions?: import("@algolia/client-common").RequestOptions): Promise<import("../model").GetObjectsResponse<T>>;
    getRule({ indexName, objectID }: import("../model").GetRuleProps, requestOptions?: import("@algolia/client-common").RequestOptions): Promise<import("../model").Rule>;
    getSettings({ indexName }: import("../model").GetSettingsProps, requestOptions?: import("@algolia/client-common").RequestOptions): Promise<import("../model").SettingsResponse>;
    getSources(requestOptions?: import("@algolia/client-common").RequestOptions): Promise<import("../model").Source[]>;
    getSynonym({ indexName, objectID }: import("../model").GetSynonymProps, requestOptions?: import("@algolia/client-common").RequestOptions): Promise<import("../model").SynonymHit>;
    getTask({ indexName, taskID }: import("../model").GetTaskProps, requestOptions?: import("@algolia/client-common").RequestOptions): Promise<import("../model").GetTaskResponse>;
    getTopUserIds(requestOptions?: import("@algolia/client-common").RequestOptions): Promise<import("../model").GetTopUserIdsResponse>;
    getUserId({ userID }: import("../model").GetUserIdProps, requestOptions?: import("@algolia/client-common").RequestOptions): Promise<import("../model").UserId>;
    hasPendingMappings({ getClusters }?: import("../model").HasPendingMappingsProps, requestOptions?: import("@algolia/client-common").RequestOptions | undefined): Promise<import("../model").HasPendingMappingsResponse>;
    listApiKeys(requestOptions?: import("@algolia/client-common").RequestOptions): Promise<import("../model").ListApiKeysResponse>;
    listClusters(requestOptions?: import("@algolia/client-common").RequestOptions): Promise<import("../model").ListClustersResponse>;
    listIndices({ page, hitsPerPage }?: import("../model").ListIndicesProps, requestOptions?: import("@algolia/client-common").RequestOptions | undefined): Promise<import("../model").ListIndicesResponse>;
    listUserIds({ page, hitsPerPage }?: import("../model").ListUserIdsProps, requestOptions?: import("@algolia/client-common").RequestOptions | undefined): Promise<import("../model").ListUserIdsResponse>;
    multipleBatch(batchParams: import("../model").BatchParams, requestOptions?: import("@algolia/client-common").RequestOptions): Promise<import("../model").MultipleBatchResponse>;
    operationIndex({ indexName, operationIndexParams }: import("../model").OperationIndexProps, requestOptions?: import("@algolia/client-common").RequestOptions): Promise<import("../model").UpdatedAtResponse>;
    partialUpdateObject({ indexName, objectID, attributesToUpdate, createIfNotExists, }: import("../model").PartialUpdateObjectProps, requestOptions?: import("@algolia/client-common").RequestOptions): Promise<import("../model").UpdatedAtWithObjectIdResponse>;
    removeUserId({ userID }: import("../model").RemoveUserIdProps, requestOptions?: import("@algolia/client-common").RequestOptions): Promise<import("../model").RemoveUserIdResponse>;
    replaceSources({ source }: import("../model").ReplaceSourcesProps, requestOptions?: import("@algolia/client-common").RequestOptions): Promise<import("../model").ReplaceSourceResponse>;
    restoreApiKey({ key }: import("../model").RestoreApiKeyProps, requestOptions?: import("@algolia/client-common").RequestOptions): Promise<import("../model").AddApiKeyResponse>;
    saveObject({ indexName, body }: import("../model").SaveObjectProps, requestOptions?: import("@algolia/client-common").RequestOptions): Promise<import("../model").SaveObjectResponse>;
    saveRule({ indexName, objectID, rule, forwardToReplicas }: import("../model").SaveRuleProps, requestOptions?: import("@algolia/client-common").RequestOptions): Promise<import("../model").UpdatedRuleResponse>;
    saveRules({ indexName, rules, forwardToReplicas, clearExistingRules, }: import("../model").SaveRulesProps, requestOptions?: import("@algolia/client-common").RequestOptions): Promise<import("../model").UpdatedAtResponse>;
    saveSynonym({ indexName, objectID, synonymHit, forwardToReplicas }: import("../model").SaveSynonymProps, requestOptions?: import("@algolia/client-common").RequestOptions): Promise<import("../model").SaveSynonymResponse>;
    saveSynonyms({ indexName, synonymHit, forwardToReplicas, replaceExistingSynonyms, }: import("../model").SaveSynonymsProps, requestOptions?: import("@algolia/client-common").RequestOptions): Promise<import("../model").UpdatedAtResponse>;
    search<T>(searchMethodParams: import("../model").LegacySearchMethodProps | import("../model").SearchMethodParams, requestOptions?: import("@algolia/client-common").RequestOptions): Promise<import("../model").SearchResponses<T>>;
    searchDictionaryEntries({ dictionaryName, searchDictionaryEntriesParams, }: import("../model").SearchDictionaryEntriesProps, requestOptions?: import("@algolia/client-common").RequestOptions): Promise<import("../model").SearchDictionaryEntriesResponse>;
    searchForFacetValues({ indexName, facetName, searchForFacetValuesRequest, }: import("../model").SearchForFacetValuesProps, requestOptions?: import("@algolia/client-common").RequestOptions): Promise<import("../model").SearchForFacetValuesResponse>;
    searchRules({ indexName, searchRulesParams }: import("../model").SearchRulesProps, requestOptions?: import("@algolia/client-common").RequestOptions): Promise<import("../model").SearchRulesResponse>;
    searchSingleIndex<T>({ indexName, searchParams }: import("../model").SearchSingleIndexProps, requestOptions?: import("@algolia/client-common").RequestOptions): Promise<import("../model").SearchResponse<T>>;
    searchSynonyms({ indexName, searchSynonymsParams }: import("../model").SearchSynonymsProps, requestOptions?: import("@algolia/client-common").RequestOptions): Promise<import("../model").SearchSynonymsResponse>;
    searchUserIds(searchUserIdsParams: import("../model").SearchUserIdsParams, requestOptions?: import("@algolia/client-common").RequestOptions): Promise<import("../model").SearchUserIdsResponse>;
    setDictionarySettings(dictionarySettingsParams: import("../model").DictionarySettingsParams, requestOptions?: import("@algolia/client-common").RequestOptions): Promise<import("../model").UpdatedAtResponse>;
    setSettings({ indexName, indexSettings, forwardToReplicas }: import("../model").SetSettingsProps, requestOptions?: import("@algolia/client-common").RequestOptions): Promise<import("../model").UpdatedAtResponse>;
    updateApiKey({ key, apiKey }: import("../model").UpdateApiKeyProps, requestOptions?: import("@algolia/client-common").RequestOptions): Promise<import("../model").UpdateApiKeyResponse>;
};
//# sourceMappingURL=node.d.ts.map