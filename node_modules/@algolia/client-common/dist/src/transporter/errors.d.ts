import type { Response, StackFrame } from '../types';
export declare class AlgoliaError extends Error {
    name: string;
    constructor(message: string, name: string);
}
export declare class ErrorWithStackTrace extends AlgoliaError {
    stackTrace: StackFrame[];
    constructor(message: string, stackTrace: StackFrame[], name: string);
}
export declare class RetryError extends ErrorWithStackTrace {
    constructor(stackTrace: StackFrame[]);
}
export declare class ApiError extends ErrorWithStackTrace {
    status: number;
    constructor(message: string, status: number, stackTrace: StackFrame[], name?: string);
}
export declare class DeserializationError extends AlgoliaError {
    response: Response;
    constructor(message: string, response: Response);
}
export type DetailedErrorWithMessage = {
    message: string;
    label: string;
};
export type DetailedErrorWithTypeID = {
    id: string;
    type: string;
    name?: string;
};
export type DetailedError = {
    code: string;
    details?: DetailedErrorWithMessage[] | DetailedErrorWithTypeID[];
};
export declare class DetailedApiError extends ApiError {
    error: DetailedError;
    constructor(message: string, status: number, error: DetailedError, stackTrace: StackFrame[]);
}
//# sourceMappingURL=errors.d.ts.map